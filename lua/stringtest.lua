--
--  string（字符串）
--  Lua 中有三种方式表示字符串:
--  1、使用一对匹配的单引号。例：'hello'。
--  2、使用一对匹配的双引号。例："abclua"。
--  3、字符串还可以用一种长括号（即[[ ]]）括起来的方式定义。
--  我们把两个正的方括号（即[[）间插入 n 个等号定义为第 n 级正长括号。就是说，0 级正的长括号写作 [[ ，
--  一级正的长括号写作 [=[，如此等等。反的长括号也作类似定义；举个例子，
--  4 级反的长括号写作 ]====]。
--  一个长字符串可以由任何一级的正的长括号开始，而由第一个碰到的同级反的长括号结束。
--  整个词法分析过程将不受分行限制，不处理任何转义符，并且忽略掉任何不同级别的长括号。
--  这种方式描述的字符串可以包含任何东西，当然本级别的反长括号除外。例：[[abc\nbc]]，里面的 "\n" 不会被转义。
--
--  另外，Lua 的字符串是不可改变的值，不能像在 c 语言中那样直接修改字符串的某个字符，
--  而是根据修改要求来创建一个新的字符串。Lua 也不能通过下标来访问字符串的某个字符。想了解更多关于字符串的操作，请查看String 库章节




local str1 = 'hello world'
local str2 = "hello lua"
local str3 = [["add\name",'hello']]
local str4 = [=[string have a [[



]].]=]

print(str1)    -->output:hello world
print(str2)    -->output:hello lua
print(str3)    -->output:"add\name",'hello'
print(str4)    -->output:string have a [[]].


--  在 Lua 实现中，Lua 字符串一般都会经历一个“内化”（intern）的过程，
--  即两个完全一样的 Lua 字符串在 Lua 虚拟机中只会存储一份。
--  每一个 Lua 字符串在创建时都会插入到 Lua 虚拟机内部的一个全局的哈希表中。
--  
--  这意味着
--  创建相同的 Lua 字符串并不会引入新的动态内存分配操作，所以相对便宜（但仍有全局哈希表查询的开销），
--  内容相同的 Lua 字符串不会占用多份存储空间，
--  已经创建好的 Lua 字符串之间进行相等性比较时是 O(1) 时间度的开销，而不是通常见到的 O(n)





